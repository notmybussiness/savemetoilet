{
  "fileName": "SaveMeToiletApp.jsx",
  "language": "javascript",
  "description": "재사용성과 성능에 초점을 맞춘 '내 주변 화장실 찾기' 리액트 애플리케이션의 전체 코드입니다.",
  "code": "import React, { useState, useEffect, useCallback, useMemo } from 'react';\n\n// =================================================================\n// 🎨 아이콘 컴포넌트 (SVG)\n// SVG를 직접 사용하여 외부 이미지 로딩을 줄이고, 로딩 속도를 높입니다.\n// =================================================================\n\nconst IconHamburger = ({ className }) => (\n  <svg className={className} stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"></path>\n  </svg>\n);\n\nconst IconClose = ({ className }) => (\n  <svg className={className} stroke=\"currentColor\" fill=\"currentColor\" strokeWidth=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"></path>\n  </svg>\n);\n\nconst IconToilet = ({ className }) => (\n    <svg className={className} stroke=\"currentColor\" fill=\"none\" strokeWidth=\"2\" viewBox=\"0 0 24 24\" strokeLinecap=\"round\" strokeLinejoin=\"round\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M4 4h16v10H4z\"></path>\n        <path d=\"M12 14v6\"></path>\n        <path d=\"M10 20h4\"></path>\n        <path d=\"M12 4V2\"></path>\n        <path d=\"M12 4a2 2 0 1 1-4 0\"></path>\n    </svg>\n);\n\nconst IconUserLocation = ({ className }) => (\n    <svg className={className} viewBox=\"0 0 24 24\" fill=\"currentColor\" height=\"1em\" width=\"1em\">\n        <path d=\"M12 8a4 4 0 100 8 4 4 0 000-8z\" />\n        <path d=\"M12 2a10 10 0 100 20 10 10 0 000-20zm0 18a8 8 0 110-16 8 8 0 010 16z\" />\n    </svg>\n);\n\n\n// =================================================================\n// 🌍 재사용 가능한 UI 컴포넌트\n// 각 컴포넌트는 독립적으로 작동하여 다른 곳에서도 쉽게 가져다 쓸 수 있습니다.\n// =================================================================\n\n/**\n * 로딩 상태를 표시하는 스피너 컴포넌트\n */\nconst LoadingSpinner = () => (\n  <div className=\"absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center z-50\">\n    <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500\"></div>\n    <p className=\"absolute text-center text-blue-600 font-semibold mt-24\">현재 위치를<br/>찾는 중...</p>\n  </div>\n);\n\n/**\n * 지도 위에 표시될 화장실 마커\n * @param {object} props - 컴포넌트 프롭스\n * @param {boolean} props.isSelected - 현재 선택된 마커인지 여부\n */\nconst ToiletMarker = ({ isSelected }) => (\n    <div className={`absolute transform -translate-x-1/2 -translate-y-full transition-all duration-300 ${isSelected ? 'z-20' : 'z-10'}`}>\n        <div className={`p-2 rounded-full shadow-lg ${isSelected ? 'bg-blue-500' : 'bg-white'}`}>\n            <IconToilet className={`h-6 w-6 ${isSelected ? 'text-white' : 'text-blue-500'}`} />\n        </div>\n        <div className={`w-3 h-3 bg-inherit transform rotate-45 -mt-2 mx-auto ${isSelected ? 'bg-blue-500' : 'bg-white'}`}></div>\n    </div>\n);\n\n/**\n * 지도 위에 표시될 사용자 위치 마커\n */\nconst UserMarker = () => (\n  <div className=\"absolute transform -translate-x-1/2 -translate-y-1/2 z-20\">\n    <div className=\"relative flex items-center justify-center\">\n      <div className=\"absolute w-8 h-8 bg-blue-200 rounded-full animate-ping\"></div>\n      <IconUserLocation className=\"h-6 w-6 text-blue-600\" />\n    </div>\n  </div>\n);\n\n/**\n * 지도 컴포넌트 (실제 지도 라이브러리 래퍼)\n * @param {object} props - 컴포넌트 프롭스\n * @param {object} props.center - 지도 중심 좌표 { lat, lng }\n * @param {array} props.toilets - 화장실 데이터 배열\n */\nconst MapView = ({ center, toilets }) => {\n    // 실제 지도 라이브러리(예: Naver, Kakao)가 이 컴포넌트 내부에 래핑됩니다.\n    // 여기서는 시뮬레이션을 위해 div로 지도를 표현합니다.\n    return (\n        <div className=\"w-full h-full bg-gray-200 relative overflow-hidden\">\n            {/* 배경 격자 패턴 */}\n            <div className=\"absolute inset-0 bg-[linear-gradient(to_right,#e5e7eb_1px,transparent_1px),linear-gradient(to_bottom,#e5e7eb_1px,transparent_1px)] bg-[size:20px_20px]\"></div>\n            \n            {/* 사용자 위치 마커 */}\n            <div className=\"absolute top-1/2 left-1/2\">\n                <UserMarker />\n            </div>\n\n            {/* 화장실 마커들 */}\n            {toilets.map((toilet) => (\n                // 실제 앱에서는 위도/경도를 화면 좌표로 변환하는 로직이 필요합니다.\n                // 여기서는 시뮬레이션을 위해 랜덤 위치에 배치합니다.\n                <div key={toilet.id} style={{ top: toilet.y, left: toilet.x }} className=\"absolute\">\n                    <ToiletMarker isSelected={false} />\n                </div>\n            ))}\n            <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 bg-black/50 text-white text-xs p-2 rounded-lg\">\n                지도를 드래그하여 주변을 탐색하세요.\n            </div>\n        </div>\n    );\n};\n\n/**\n * 사이드 메뉴 컴포넌트\n * @param {object} props - 컴포넌트 프롭스\n * @param {boolean} props.isOpen - 메뉴가 열려있는지 여부\n * @param {function} props.onClose - 메뉴를 닫는 함수\n */\nconst SideMenu = ({ isOpen, onClose }) => (\n  <>\n    {/* 배경 오버레이 */}\n    <div \n      className={`fixed inset-0 bg-black/50 z-30 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}\n      onClick={onClose}\n    ></div>\n    {/* 메뉴 컨텐츠 */}\n    <aside className={`fixed top-0 left-0 h-full w-4/5 max-w-sm bg-white z-40 shadow-2xl transform transition-transform duration-300 ease-in-out ${isOpen ? 'translate-x-0' : '-translate-x-full'}`}>\n      <div className=\"p-4\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-bold text-gray-800\">메뉴</h2>\n          <button onClick={onClose} className=\"p-2 text-gray-600 hover:text-gray-900\">\n            <IconClose className=\"h-6 w-6\" />\n          </button>\n        </div>\n        <nav>\n          <ul>\n            {['주변 화장실 목록', '필터 설정', '새로운 장소 제보', '앱 설정'].map(item => (\n              <li key={item} className=\"mb-2\">\n                <a href=\"#\" className=\"block p-3 rounded-lg text-lg text-gray-700 hover:bg-blue-50 transition-colors\">\n                  {item}\n                </a>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n    </aside>\n  </>\n);\n\n\n// =================================================================\n// 🧠 로직 분리 (커스텀 훅)\n// 데이터 fetching, 상태 관리 등 복잡한 로직을 분리하여 재사용성을 높입니다.\n// =================================================================\n\n/**\n * 사용자의 현재 위치를 가져오는 커스텀 훅\n */\nconst useUserLocation = () => {\n    const [location, setLocation] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // 실제 위치 정보 가져오기\n        navigator.geolocation.getCurrentPosition(\n            (position) => {\n                setLocation({\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude,\n                });\n                setIsLoading(false);\n            },\n            (err) => {\n                setError(err.message);\n                // 에러 발생 시 기본 위치(서울 시청)로 설정\n                setLocation({ lat: 37.5665, lng: 126.9780 });\n                setIsLoading(false);\n            },\n            { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n        );\n    }, []);\n\n    return { location, error, isLoading };\n};\n\n/**\n * 주변 화장실 데이터를 가져오는 커스텀 훅 (API 호출 시뮬레이션)\n * @param {object} location - 화장실을 검색할 중심 위치 { lat, lng }\n */\nconst useToiletData = (location) => {\n    const [toilets, setToilets] = useState([]);\n    \n    useEffect(() => {\n        if (!location) return;\n\n        // --- API 호출 시뮬레이션 ---\n        // 실제 앱에서는 이 부분에서 서버 API를 호출합니다 (예: fetch('/api/toilets?lat=...'))\n        console.log(\"주변 화장실 데이터 요청:\", location);\n        const mockData = Array.from({ length: 15 }, (_, i) => ({\n            id: i,\n            name: `테스트 화장실 ${i + 1}`,\n            // 지도 시뮬레이션을 위한 랜덤 좌표\n            x: `${Math.random() * 90 + 5}%`,\n            y: `${Math.random() * 90 + 5}%`,\n        }));\n        \n        // 0.5초 지연 후 데이터 설정 (네트워크 지연 시뮬레이션)\n        const timer = setTimeout(() => {\n            setToilets(mockData);\n        }, 500);\n\n        return () => clearTimeout(timer);\n        // --- 시뮬레이션 종료 ---\n\n    }, [location]);\n\n    return toilets;\n};\n\n\n// =================================================================\n// 🚀 메인 애플리케이션 컴포넌트\n// =================================================================\nexport default function App() {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const { location, isLoading: isLocationLoading, error: locationError } = useUserLocation();\n    const toilets = useToiletData(location);\n\n    const toggleMenu = useCallback(() => {\n        setIsMenuOpen(prev => !prev);\n    }, []);\n\n    // 메모이제이션을 통해 불필요한 MapView 리렌더링 방지\n    const memoizedMap = useMemo(() => (\n        <MapView center={location} toilets={toilets} />\n    ), [location, toilets]);\n\n    return (\n        <div className=\"h-screen w-screen relative font-sans\">\n            {isLocationLoading && <LoadingSpinner />}\n            \n            <main className=\"w-full h-full\">\n                {location ? memoizedMap : (\n                    // 위치 정보를 가져오지 못했을 때의 대체 UI\n                    !isLocationLoading && <div className=\"w-full h-full flex items-center justify-center bg-gray-100 text-center\">\n                        <p className=\"text-gray-600\">\n                            {locationError ? `위치 정보를 가져오는 데 실패했습니다.\\n(${locationError})` : '지도를 표시하려면 위치 정보가 필요합니다.'}\n                        </p>\n                    </div>\n                )}\n            </main>\n\n            {/* 햄버거 메뉴 버튼 */}\n            <button \n                onClick={toggleMenu} \n                className=\"absolute top-4 left-4 z-20 p-3 bg-white rounded-full shadow-lg text-gray-700 hover:bg-gray-100 transition-all\"\n                aria-label=\"메뉴 열기\"\n            >\n                <IconHamburger className=\"h-6 w-6\" />\n            </button>\n\n            {/* 사이드 메뉴 */}\n            <SideMenu isOpen={isMenuOpen} onClose={toggleMenu} />\n        </div>\n    );\n}\n"
}
